services:
<<<<<<< HEAD
    # We need to run the FPM container for our application
    laravel.fpm:
        build:
            context: .
            target: fpm_server
        image: laravel-in-kubernetes/fpm_server
        # We can override any env values here.
        # By default the .env in the project root will be loaded as the environment for all containers
        environment:
            APP_DEBUG: "true"
        ports:
            - 6003:6379
        # Mount the codebase, so any code changes we make will be propagated to the running application
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravel-in-kubernetes'
        networks:
            - laravel-in-kubernetes

    # Run the web server container for static content, and proxying to our FPM container
    laravel.web:
        build:
            context: .
            target: web_server
        image: laravel-in-kubernetes/web_server
        # Expose our application port (80) through a port on our local machine (8080)
        ports:
            - '8080:80'
        environment:
            # We need to pass in the new FPM hst as the name of the fpm container on port 9000
            FPM_HOST: "laravel.fpm:9000"
        # Mount the public directory into the container so we can serve any static files directly when they change
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - './public:/opt/apps/laravel-in-kubernetes/public'
        networks:
            - laravel-in-kubernetes
    # Run the Laravel Scheduler
    laravel.cron:
        build:
            context: .
            target: cron
        image: laravel-in-kubernetes/cron
        # Here we mount in our codebase so any changes are immediately reflected into the container
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravel-in-kubernetes'
        networks:
            - laravel-in-kubernetes
    # Run the frontend, and file watcher in a container, so any changes are immediately compiled and servable
    laravel.frontend:
        build:
            context: .
            target: frontend
        # Override the default CMD, so we can watch changes to frontend files, and re-transpile them.
        command: ["npm", "run", "watch"]
        image: laravel-in-kubernetes/frontend
        volumes:
            # Here we mount in our codebase so any changes are immediately reflected into the container
            - '.:/opt/apps/laravel-in-kubernetes'
            # Add node_modeules as singular volume.
            # This prevents our local node_modules from being propagated into the container,
            # So the node_modules can be compiled for each of the different architectures (Local, Image)
            - '/opt/app/node_modules/'
        networks:
            - laravel-in-kubernetes

    mysql:
        image: 'mysql:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            #MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'laravel-in-kubernetes-mysql:/var/lib/mysql'
        networks:
            - laravel-in-kubernetes
        healthcheck:
          test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
          retries: 3
          timeout: 5s

networks:
    laravel-in-kubernetes:

volumes:
    laravel-in-kubernetes-mysql:
=======

  php:
    build:
      context: "."
      dockerfile: "Dockerfile"
    restart: unless-stopped
    #ports:
    #   - 9000:9000
    volumes:
      - ./:/var/www/html
      - ./docker/php-fpm/php-fpm.ini:/opt/bitnami/php/etc/php-fpm.conf
      - ./docker/php-fpm/php.ini:/usr/local/etc/php/php.ini-production
      - ./docker/php-fpm/php-dev.ini:/usr/local/etc/php/php.ini-development
    environment:
      PHP_UPLOAD_MAX_FILESIZE: '2000M'
      PHP_POST_MAX_SIZE: '2000M'
      PHP_MAX_EXECUTION_TIME: '300'
      PHP_MEMORY_LIMIT: '50000M'
    expose:
      - 9000
    networks:
    #  - public_network
      - internal_network
    deploy:
      mode: replicated
      replicas: 2

    #depends_on:
    #    - nginx
  nginx:
    image: nginx:1.27.0
    restart: unless-stopped
    ports:
     - 80:80
     - 443:443
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/site.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./:/var/www/html
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/html:/var/www/certbot
    depends_on:
      - php
    environment:
      DOMAIN_NAME: superzaki.com
    networks:
      - internal_network
      - public_network

  db:
    image: mysql:8.0.36
    restart: unless-stopped
    ports:
      - "${DB_PORT-3306}:3307"
    volumes:
      -  /mnt/blockstorage/mysql:/var/lib/mysql_docker
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_HOST: "%"
      #MYSQL_USER: ${DB_USERNAME}
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    networks:
      - internal_network

  composer:
    image: composer
    volumes:
      - ./docker/php-composer/entrypoint.sh:/entrypoint.sh
      - ./:/var/www/html
      - ./docker/php-composer/.composer_json_hash:/var/www/composer_json_hash/.composer_json_hash
    working_dir: /var/www/html
    entrypoint: /bin/sh -c '/entrypoint.sh'
    environment:
      COMPOSER_ALLOW_SUPERUSER: '1'
    depends_on:
      - php
      - nginx

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./docker/certbot/entrypoint.sh:/entrypoint.sh
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/html:/var/www/certbot
      - ./docker/nginx/site.conf:/var/www/nginx/site.conf
      - ./docker/nginx/ssl:/var/www/nginx/ssl
    environment:
      - APP_URL=${APP_URL}
      - DOMAIN_NAME=superzaki.com
    entrypoint: /bin/sh -c '/entrypoint.sh'
    depends_on:
      - nginx
    restart: "no"


networks:
  public_network:
     driver: bridge

  internal_network:
     internal: true


#networks:
#  network:
>>>>>>> 48300f898e165367a43d20c975bac0c51e37efe0
